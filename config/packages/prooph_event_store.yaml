prooph_event_store:
    stores:
        default:
            event_store: 'Prooph\EventStore\Pdo\PostgresEventStore'
            repositories:
                AulaSoftwareLibre\Iam\Infrastructure\EventStore\EventStoreUsers:
                    aggregate_type: 'AulaSoftwareLibre\Iam\Domain\User\Model\User'
                    aggregate_translator: 'prooph_event_sourcing.aggregate_translator'

    projection_managers:
        default:
            event_store: 'Prooph\EventStore\Pdo\PostgresEventStore'
            connection: 'doctrine.pdo.connection'
            projections:
                user_projection:
                    read_model: 'AulaSoftwareLibre\Iam\Infrastructure\ReadModel\User\UserReadModel'
                    projection: 'AulaSoftwareLibre\Iam\Infrastructure\ReadModel\User\UserProjection'


services:
    _defaults:
        public: false

    Prooph\EventStore\Pdo\PostgresEventStore:
        arguments:
            - '@prooph_event_store.message_factory'
            - '@doctrine.pdo.connection'
            - '@prooph_event_store.single_stream_strategy'

    Prooph\EventStore\EventStore: '@Prooph\EventStore\Pdo\PostgresEventStore'

    doctrine.pdo.connection:
        class: '\PDO'
        factory: ['@database_connection', 'getWrappedConnection']

    prooph_event_sourcing.aggregate_translator:
        class: 'Prooph\EventSourcing\EventStoreIntegration\AggregateTranslator'

    prooph_event_store.single_stream_strategy:
        class: 'Prooph\EventStore\Pdo\PersistenceStrategy\PostgresSingleStreamStrategy'

    # Repositories
    AulaSoftwareLibre\Iam\Application\User\Repository\Users: '@AulaSoftwareLibre\Iam\Infrastructure\EventStore\EventStoreUsers'
    AulaSoftwareLibre\Iam\Infrastructure\Repository\UserViews: '@AulaSoftwareLibre\Iam\Infrastructure\Repository\UserViewsRepository'
